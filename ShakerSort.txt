#include <iostream>
#include <fstream>
#include <chrono>
#include <ctime>


using namespace std;
ofstream out("ShakerSort_100000");

void swap(int *a, int *b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}


void ShakerSort(int vect[], int n)
{
    int i, j, k;
    for(i = 0; i < n;)
    {
       
        for(j = i+1; j < n; j++)
        {
            if(vect[j] < vect[j-1])
                swap(&vect[j], &vect[j-1]);
        }
       
        n--;

       
        for(k = n-1; k > i; k--)
        {
            if(vect[k] < vect[k-1])
                swap(&vect[k], &vect[k-1]);
        }
       
        i++;
    }
}

int main()
{
    int vect[100000];
    int n=100000;
    int i=30001;
    out<<"Timp in Milisecunde"<<endl;
    while(i<=32000)
    {
        char nr[10];
        itoa(i,nr,10);
        ifstream in(nr);
        int j=0;
        while(in)
        {
            in>>vect[j++];
        }
    chrono::steady_clock::time_point start = chrono::steady_clock::now();

      ShakerSort(vect,n);

    chrono:: steady_clock :: time_point end = chrono::steady_clock::now();
    chrono::steady_clock::duration d = end - start;
    out <<(float)( chrono::duration_cast<chrono::nanoseconds>(d).count())/1000000;
    out<< endl;
        for(j=0; j<n; j++)
        {
            cout<<vect[j]<<" ";
        }
        cout<<endl;
        i++;
    }
    out.close();
    return 0;
}